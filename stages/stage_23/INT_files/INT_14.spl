//semlock(19) and semunlock(20)
alias ret R0;
alias fno R1;
alias PID R2;
alias val R3;
alias x R4;
alias y R5;
alias z R6;
alias rval R7;
alias uSP R8;
alias userret R9;
goto global_start;

adress_translate: 
x=val/512;
y=val%512;
rval=([PTBR+2*x]*512)+y;
return;

global_start:

PID=[SYSTEM_STATUS_TABLE+1];
uSP=SP;
[PROCESS_TABLE+PID*16+13]=SP;
SP=[PROCESS_TABLE+PID*16+11]*512-1;


val=uSP-5;
call adress_translate;
fno=[rval];

val=uSP-1;
call adress_translate;
userret=rval;

val=uSP-4;
call adress_translate;
val=[rval];

[PROCESS_TABLE+PID*16+9]=fno;
x=[PROCESS_TABLE+PID*16+11];
x=(x+1)*512-16;
if(val<8 && val>=0 && [x+2*val]==SEMAPHORE)
then
val=[x+2*val+1];
else
[userret]=-1;
fno=-1;
endif;


if(fno==19) //semlock
then
while([SEMAPHORE_TABLE+4*val]!=-1)
do
[PROCESS_TABLE+16*PID+4]=WAIT_SEMAPHORE;
[PROCESS_TABLE+16*PID+5]=val;
backup;
call MOD_5;
restore;
endwhile;
[SEMAPHORE_TABLE+4*val]=PID;
[userret]=0;
endif;



if(fno==20) //sem unlock
then
if([SEMAPHORE_TABLE+4*val]==PID)
then
[SEMAPHORE_TABLE+4*val]=-1;
x=1;
while(x<16)
do
if([PROCESS_TABLE+16*x+4]==WAIT_SEMAPHORE && [PROCESS_TABLE+16*x+5]==val)
then
[PROCESS_TABLE+16*x+4]=READY;
endif;
x=x+1;
endwhile;
[userret]=0;
else
print "err:s20";
[userret]=-2;
endif;
endif;


SP=[PROCESS_TABLE+PID*16+13];
[PROCESS_TABLE+PID*16+9]=0;
ireturn;