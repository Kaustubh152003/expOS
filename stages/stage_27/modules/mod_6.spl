alias ret R0;
alias fno R1;
alias PID R2;
alias val R3;
alias x R4;
alias y R5;
alias z R6;
alias max R7;
alias s R8;
alias flag R9;
alias p R10;

if(fno==1) //swap out
then
flag=0;

x=3;
while(x<15)
do
if([PROCESS_TABLE+16*x+6]==0 && [PROCESS_TABLE+16*x+4]==WAIT_PROCESS)
then
break;
endif;
x=x+1;
endwhile;

if(x==15) //if_ no wait process
then
x=3;
while(x<15)
do
if([PROCESS_TABLE+16*x+6]==0 && [PROCESS_TABLE+16*x+4]==WAIT_SEMAPHORE)
then
break;
endif;
x=x+1;
endwhile;
endif;

s=15;
max=-1;
if(x==15)
then
flag=1;
x=3;
while(x<15)
do
if([PROCESS_TABLE+x*16]>max && [PROCESS_TABLE+x*16+4]!=RUNNING && [PROCESS_TABLE+x*16+4]!=TERMINATED && [PROCESS_TABLE+x*16+4]!=ALLOCATED && [PROCESS_TABLE+x*16+6]!=1)
then
s=x;
max=[PROCESS_TABLE+x*16];
endif;
x=x+1;
endwhile;
endif;

if(flag==1)
then
x=s;
endif;


if(x==15)
then
[SYSTEM_STATUS_TABLE+5]=0;
return;
endif;

[PROCESS_TABLE+x*16]=0;
y=PAGE_TABLE_BASE+20*x;
z=4;
while(z<8)
do
if([y+2*z]!=-1)
then

call mpush; //release page
fno=2;
val=[y+2*z];
call MOD_2;
call mpop;

[y+2*z]=-1;
[y+2*z+1]="0000";
endif;
z=z+1;
endwhile;


z=2;
while(z<10)
do
if((z<4 && [y+2*z]!=-1 && [MEMORY_FREE_LIST+[y+2*z]]==1) || (z>7 && [y+2*z]!=-1))
then

call mpush; //getting free block for swap
fno=6;
call MOD_2;
call mpop;

[DISK_MAP_TABLE+10*x+z]=ret;

call mpush; //disk_store
fno=1;
val=[y+2*z];
x=ret;
call MOD_4;
call mpop;

call mpush; //release page
fno=2;
val=[y+2*z];
call MOD_2;
call mpop;

[y+2*z]=-1;
[y+2*z+1]="0000";

endif;
z=z+1;
endwhile;
[PROCESS_TABLE+16*x+6]=1;
[SYSTEM_STATUS_TABLE+4]=[SYSTEM_STATUS_TABLE+4]+1;
[SYSTEM_STATUS_TABLE+5]=0;
endif;



if(fno==2) //swap in
then
s=15;
max=-1;
x=3;
while(x<15)
do
if([PROCESS_TABLE+x*16]>max && [PROCESS_TABLE+x*16+6]==1 && [PROCESS_TABLE+x*16+4]==READY)
then
s=x;
max=[PROCESS_TABLE+x*16];
endif;
x=x+1;
endwhile;

if(s==15)
then
[SYSTEM_STATUS_TABLE+5]=0;
return;
endif;
x=s;

[PROCESS_TABLE+x*16]=0;
y=PAGE_TABLE_BASE+20*x;
z=2;
while(z<10)
do
if((z<4 || z>7) && ([DISK_MAP_TABLE+10*x+z]!=-1))
then

call mpush; //getting free page
fno=1;
call MOD_2;
call mpop;

p=ret;

call mpush; //disk_load
fno=2;
val=ret;
x=[DISK_MAP_TABLE+10*x+z];
call MOD_4;
call mpop;


call mpush; //release block
fno=4;
val=[DISK_MAP_TABLE+10*x+z];
call MOD_2;
call mpop;

[y+2*z]=p;
[y+2*z+1]="0110";
[DISK_MAP_TABLE+10*x+z]=-1;

endif;
z=z+1;
endwhile;

[PROCESS_TABLE+16*x+6]=0;
[SYSTEM_STATUS_TABLE+4]=[SYSTEM_STATUS_TABLE+4]-1;
[SYSTEM_STATUS_TABLE+5]=0;

endif;

//breakpoint;
return;










mpush:
multipop(R11);
multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
multipush(R11);
return;

mpop:
multipop(R11);
multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
multipush(R11);
return;