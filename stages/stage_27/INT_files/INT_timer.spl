alias ret R0;
alias fno R1;
alias PID R2;
alias val R3;
alias x R4;
alias y R5;
alias z R6;
alias p R7;
alias q R8;
alias r R9;

[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13]=SP;
SP=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11]*512-1;
backup;
PID=[SYSTEM_STATUS_TABLE+1];



//begin
if([SYSTEM_STATUS_TABLE+5]!=0)
then
if(PID==15 && [SYSTEM_STATUS_TABLE+5]==SWAP_OUT)
then
multipush(R1,R2,R3,R4,R5,R6,R7); //swap out
fno=1;
call MOD_6;
multipop(R1,R2,R3,R4,R5,R6,R7);
else
if(PID==15 && [SYSTEM_STATUS_TABLE+5]==SWAP_IN)
then
multipush(R1,R2,R3,R4,R5,R6,R7); //swap in
fno=2;
call MOD_6;
multipop(R1,R2,R3,R4,R5,R6,R7);
endif;
endif;

else
if([SYSTEM_STATUS_TABLE+2]<MEM_LOW)
then
[SYSTEM_STATUS_TABLE+5]=SWAP_OUT;
else
if([SYSTEM_STATUS_TABLE+4]>0)
then
x=3;
while(x<15)
do
if([PROCESS_TABLE+16*x+6]==1 && [PROCESS_TABLE+16*x]>MAX_TICK)
then
break;
endif;
x=x+1;
endwhile;
if(x!=16 || [SYSTEM_STATUS_TABLE+2]>MEM_HIGH)
then
[SYSTEM_STATUS_TABLE+5]=SWAP_IN;
endif;
endif;
endif;
endif;
//end




[PROCESS_TABLE+PID*16+4]=READY;

x=0;
while(x<16)
do
if([PROCESS_TABLE+16*x+4]!=TERMINATED)
then
[PROCESS_TABLE+16*x]=[PROCESS_TABLE+16*x]+1;
endif;
x=x+1;
endwhile;


backup;
call MOD_5;
restore;


restore;
SP=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+13];
ireturn;
