//read_system_call
alias ret R0;
alias fno R1;
alias PID R2;
alias val R3;
alias arg1 R4;
alias arg2 R5;
alias userret R6;
alias x R7;
alias y R8;
alias z R9;
alias retval R10;
alias p R11;
alias uSP R12;
goto global_start;

adress_translate:
y=x/512;
z=x%512;
retval=z+([PTBR+2*y]*512);
return;

global_start:
uSP=SP;
PID=[SYSTEM_STATUS_TABLE+1];
[PROCESS_TABLE+16*PID+13]=SP;
SP=[PROCESS_TABLE+16*PID+11]*512-1;
[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+9]=7;


x=uSP-3;
call adress_translate;
arg2=[retval];

x=uSP-4;
call adress_translate;
arg1=[retval];

x=uSP-1;
call adress_translate;
userret=retval;

x=arg2;
call adress_translate;

if(arg1==-1)
then
backup;
fno=4;
x=arg2;
call adress_translate;
val=retval;
call MOD_4;
restore;
[userret]=0;
else                //from here
x=[PROCESS_TABLE+PID*16+11];
x=(x+1)*512-16;
if(arg1<8 && arg1>=0 && [x+2*arg1]==FILE)
then
y=[x+2*arg1+1];          //open file table index y
z=[OPEN_FILE_TABLE+4*y];//inode index z
multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12); //acquire inode
fno=4;
val=z;
call MOD_0;
multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
if(ret==-1)
then
[userret]=-1;
else
p=OPEN_FILE_TABLE+4*y+2;
if(z==INODE_ROOT)
then
if([p]==480)
then
[userret]=-2;
else
[retval]=[ROOT_FILE+[p]];
[p]=[p]+1;
endif;
else
if([p]==[INODE_TABLE+z*16+2])
then
[userret]=-2;
else
multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
p=[p];
fno=2;
val=[INODE_TABLE+z*16+8+(p/512)];
arg1=p%512;
arg2=retval;
call MOD_3;
multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
[p]=[p]+1;
[userret]=0;
endif;

endif;
multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12); //release inode
fno=5;
val=z;
call MOD_0;
multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
endif;
else
print "err:s7";
print arg1;
[userret]=-1;
endif; 

endif;




SP=[PROCESS_TABLE+PID*16+13];
[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+9]=0;
ireturn;
