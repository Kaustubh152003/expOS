//open and close files
alias ret R0;
alias fno R1;
alias PID R2;
alias val R3;
alias x R4;
alias y R5;
alias z R6;
alias rval R7;
alias uSP R8;
alias userret R9;
alias filename R10;
goto global_start;

adress_translate: 
x=val/512;
y=val%512;
rval=([PTBR+2*x]*512)+y;
return;

global_start:
PID=[SYSTEM_STATUS_TABLE+1];
uSP=SP;
[PROCESS_TABLE+PID*16+13]=SP;
SP=[PROCESS_TABLE+PID*16+11]*512-1;

val=uSP-5;
call adress_translate;
fno=[rval];

val=uSP-4;
call adress_translate;
filename=[rval];

val=uSP-3;
call adress_translate;
z=[rval];

val=uSP-1;
call adress_translate;
userret=rval;

[PROCESS_TABLE+PID*16+9]=fno;

if(fno==2) //open
then
x=[PROCESS_TABLE+PID*16+11];
x=(x+1)*512-16;
y=0;
while(y<8 && [x]!=-1)
do
x=x+2;
y=y+1;
endwhile;
if(y==8)
then
print "err:s2";
[userret]=-1;
else
multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
fno=3;
val=filename;
call MOD_3;
multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
if(ret==-1)
then
[userret]=-2;
else
[x]=FILE;
[x+1]=ret;
[userret]=y;
endif;
endif;
endif;





if(fno==3) //close
then
val=filename;
x=[PROCESS_TABLE+PID*16+11];
x=(x+1)*512-16;
if(val<8 && val>=0 && [x+2*val]==FILE)
then
y=[x+2*val+1];
multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
fno=4;
val=y;
call MOD_3;
multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
[x+2*val]=-1;
val=[x+2*val+1];
[userret]=0;
else
print "err:s3";
print val;
[userret]=-1;
endif;
endif;

if(fno==6) //seek
then
val=filename;
x=[PROCESS_TABLE+PID*16+11];
x=(x+1)*512-16;
if(val<8 && val>=0 && [x+2*val]==FILE)
then
y=[x+2*val+1];
x=[OPEN_FILE_TABLE+4*y];
multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10); //acquire inode
val=x;
fno=4;
call MOD_0;
multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
if(ret==-1)
then
[userret]=-1;
else
if(z==0)
then
[OPEN_FILE_TABLE+4*y+2]=0;
else
if([OPEN_FILE_TABLE+4*y+2]+z>=[INODE_TABLE+16*x+2])
then
[OPEN_FILE_TABLE+4*y+2]=[INODE_TABLE+16*x+2];
else
[OPEN_FILE_TABLE+4*y+2]=[OPEN_FILE_TABLE+4*y+2]+z;
endif;
endif;
multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10); //release inode
val=x;
fno=5;
call MOD_0;
multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
[userret]=0;
endif;
else
print "err:s6";
print val;
[userret]=-1;
endif;
endif;

SP=[PROCESS_TABLE+PID*16+13];
[PROCESS_TABLE+PID*16+9]=0;
ireturn;