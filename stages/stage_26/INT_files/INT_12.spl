alias ret R0;
alias fno R1;
alias PID R2;
alias val R3;
alias x R4;
alias y R5;
alias z R6;
alias rval R7;
alias uSP R8;
alias userret R9;
goto global_start;

adress_translate: 
x=val/512;
y=val%512;
rval=([PTBR+2*x]*512)+y;
return;

global_start:

PID=[SYSTEM_STATUS_TABLE+1];
uSP=SP;
[PROCESS_TABLE+PID*16+13]=SP;
SP=[PROCESS_TABLE+PID*16+11]*512-1;


val=uSP-5;
call adress_translate;
fno=[rval];

val=uSP-1;
call adress_translate;
userret=rval;


[PROCESS_TABLE+PID*16+9]=fno;

if(fno==28 && PID==2)
then
multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
fno=5;
call MOD_1; 
multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
[PROCESS_TABLE+PID*16+4]=TERMINATED;
[78*512]=[67*512+1];
[PROCESS_TABLE+PID*16+13]=8*512;
[PROCESS_TABLE+16+4]=READY;
[SYSTEM_STATUS_TABLE]=0;
backup;
call MOD_5;
restore;
else
[userret]=-1;
endif;

SP=[PROCESS_TABLE+PID*16+13];
[PROCESS_TABLE+PID*16+9]=0;
breakpoint;
ireturn;